{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../src/utils/isHTMLElement.ts","../../src/constants.ts","../../src/logic/attachEventListeners.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/utils/isKey.ts","../../src/utils/compact.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/transformToNestObject.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/logic/focusOnErrorField.ts","../../src/logic/removeAllEventListeners.ts","../../src/logic/getRadioValue.ts","../../src/utils/isRadioInput.ts","../../src/utils/isFileInput.ts","../../src/utils/isCheckBoxInput.ts","../../src/utils/isMultipleSelect.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/utils/isDetached.ts","../../src/utils/isEmptyObject.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/findRemovedFieldAndRemoveListener.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepMerge.ts","../../src/utils/deepEqual.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/isString.ts","../../src/logic/getFieldsValues.ts","../../src/logic/isErrorStateChanged.ts","../../src/utils/isRegex.ts","../../src/logic/getValueAndMessage.ts","../../src/utils/isFunction.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/appendErrors.ts","../../src/logic/validateField.ts","../../src/utils/getPath.ts","../../src/logic/assignWatchFields.ts","../../src/logic/skipValidation.ts","../../src/logic/getNodeParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/isSelectInput.ts","../../src/utils/onDomRemove.ts","../../src/utils/isWeb.ts","../../src/utils/cloneObject.ts","../../src/utils/validationModeChecker.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/useForm.ts","../../src/useFormContext.tsx"],"names":["_unsupportedIterableToArray","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","_arrayLikeToArray","arr","len","length","i","arr2","_slicedToArray","isArray","Symbol","iterator","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","err","unsupportedIterableToArray","TypeError","_createForOfIteratorHelper","allowArrayLike","it","F","s","e","f","normalCompletion","didErr","step","_e2","_defineProperty","obj","key","defineProperty","enumerable","configurable","writable","_toConsumableArray","arrayLikeToArray","iter","HTMLElement","EVENTS","VALIDATION_MODE","SELECT","UNDEFINED","INPUT_VALIDATION_RULES","attachEventListeners","shouldAttachChangeEvent","handleChange","ref","isHTMLElement","addEventListener","isObjectType","isNullOrUndefined","Date","filter","Boolean","input","compact","replace","split","set","object","path","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isObject","isNaN","data","val","defaultValue","result","reduce","isUndefined","fields","fieldErrors","field","focus","options","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","previous","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","shallowFieldsStateRef","excludeDisabled","shouldKeepRawValue","current","disabled","valueAsNumber","valueAsDate","setValueAs","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","NaN","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","keys","unset","previousObjRef","updatePath","childObject","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","findRemovedFieldAndRemoveListener","shouldUnregister","forceDelete","fieldRef","isCheckBoxInput","forEach","removeAllEventListeners","deepMerge","target","source","isPrimitive","targetValue","sourceValue","deepEqual","object1","object2","isErrorObject","React.isValidElement","keys1","keys2","val1","val2","setDirtyFields","defaultValues","dirtyFields","parentName","shallowFieldsState","search","output","isString","startsWith","find","transformToNestObject","errors","error","validFields","fieldsWithValidation","previousError","RegExp","validationData","isRegex","message","getValidateError","validateAllFieldCriteria","types","a","required","maxLength","minLength","min","max","pattern","validate","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","getFieldsValue","validateRef","isFunction","validateError","validationResult","entries","validateFunction","validateResult","getPath","rootPath","paths","property","rootName","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","isMatchFieldArrayName","searchName","names","some","onDomRemove","removeFieldEventListenerAndRef","observer","MutationObserver","observe","window","document","childList","subtree","cloneObject","copy","isWeb","File","getTime","Set","Map","get","mode","isOnSubmit","isWindowUndefined","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","React.useRef","fieldArrayDefaultValuesRef","fieldArrayValuesRef","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","modeChecker","isValidateAllFieldCriteria","React.useState","isDirty","isValidating","submitCount","touched","isSubmitting","isSubmitSuccessful","formState","setFormState","readFormStateRef","formStateRef","observerRef","updateFormState","React.useCallback","state","updateIsValidating","shouldRenderBaseOnError","shouldRender","shouldReRender","isErrorStateChanged","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","isFormDirty","formValues","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","Promise","all","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","getNodeParentName","setFieldArrayDirtyFields","isFieldWatched","match","renderWatchedInputs","found","size","setValue","setFieldArrayDefaultValues","payload","getFieldsValues","shouldSkipValidation","skipValidation","parentNodeName","currentError","validateResolver","newDefaultValues","removeFieldEventListener","updateWatchedValue","clearErrors","inputName","setError","shouldFocus","watchInternal","fieldNames","watchId","assignWatchFields","combinedDefaultValues","watch","unregister","registerFieldRef","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","isSelectInput","register","refOrRegisterOptions","handleSubmit","onValid","onInvalid","preventDefault","persist","fieldError","focusOnErrorField","resetRefs","reset","omitResetState","inputRef","closest","resetFieldArray","React.useEffect","disconnect","commonProps","prop","control","React.useMemo","FormContext","React.createContext","displayName"],"mappings":"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","file":"static/js/0.029ba399.chunk.js","sourcesContent":["import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: string) => /^\\w*$/.test(value);\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus && isUndefined(field.ref.focus())) {\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n  shouldKeepRawValue?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n      valueAsNumber,\n      valueAsDate,\n      setValueAs,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return shouldKeepRawValue\n      ? value\n      : valueAsNumber\n      ? value === ''\n        ? NaN\n        : +value\n      : valueAsDate\n      ? (ref as HTMLInputElement).valueAsDate\n      : setValueAs\n      ? setValueAs(value)\n      : value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\n  }\n\n  if (!ref.type || !fieldRef) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if (isRadioInput(ref) || isCheckBoxInput(ref)) {\n    if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\n      compact(fieldRef.options).forEach((option = {}, index): void => {\n        if (\n          (isDetached(option.ref) && isSameRef(option, option.ref)) ||\n          forceDelete\n        ) {\n          removeAllEventListeners(option.ref, handleChange);\n          unset(fieldRef.options, `[${index}]`);\n        }\n      });\n\n      if (fieldRef.options && !compact(fieldRef.options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import * as React from 'react';\nimport isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\nimport { deepMerge } from '../utils/deepMerge';\nimport deepEqual from '../utils/deepEqual';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsState: Record<string, any>,\n  shouldUnregister: boolean,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return shouldUnregister\n    ? transformToNestObject(output)\n    : deepMerge(shallowFieldsState, transformToNestObject(output));\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean => {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule } from '../types';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import * as React from 'react';\nimport isString from '../utils/isString';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox\n          ? (((fieldsRef.current[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if ((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && value !== '') {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(value)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      value.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      value.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(\n      fieldsRef,\n      name,\n      shallowFieldsStateRef,\n      false,\n      true,\n    );\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldName } from '../types';\n\nexport const getPath = <TFieldValues>(\n  rootPath: FieldName<TFieldValues>,\n  values: any,\n  paths: FieldName<TFieldValues>[] = [],\n): FieldName<TFieldValues>[] => {\n  for (const property in values) {\n    const rootName = (rootPath +\n      (isObject(values)\n        ? `.${property}`\n        : `[${property}]`)) as FieldName<TFieldValues>;\n\n    isPrimitive(values[property])\n      ? paths.push(rootName)\n      : getPath(rootName, values[property], paths);\n  }\n\n  return paths;\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value = undefined;\n\n  watchFields.add(fieldName);\n\n  if (!isEmptyObject(fieldValues)) {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED && typeof document !== UNDEFINED;\n","import isPrimitive from './isPrimitive';\nimport isHTMLElement from './isHTMLElement';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n\n  if (\n    isPrimitive(data) ||\n    (isWeb && (data instanceof File || isHTMLElement(data)))\n  ) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n    for (const item of data) {\n      copy.add(item);\n    }\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key)));\n    }\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (const key in data) {\n    copy[key] = cloneObject(data[key]);\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getNodeParentName from './logic/getNodeParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isWeb from './utils/isWeb';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  RegisterOptions,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n  SetFieldValue,\n  FieldArrayDefaultValues,\n  ResetFieldArrayFunctionRef,\n  UseWatchRenderFunctions,\n  RecordInternalNameSet,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const fieldArrayValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<RecordInternalNameSet<TFieldValues>>(\n    {},\n  );\n  const useWatchRenderFunctionsRef = React.useRef<UseWatchRenderFunctions>({});\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef({});\n  const resetFieldArrayFunctionRef = React.useRef<\n    ResetFieldArrayFunctionRef<TFieldValues>\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isValidating: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n  shallowFieldsStateRef.current = shouldUnregister\n    ? {}\n    : isEmptyObject(shallowFieldsStateRef.current)\n    ? cloneObject(defaultValues)\n    : shallowFieldsStateRef.current;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) => {\n      if (!isUnMount.current) {\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...state,\n        };\n        setFormState(formStateRef.current);\n      }\n    },\n    [],\n  );\n\n  const updateIsValidating = () =>\n    readFormStateRef.current.isValidating &&\n    updateFormState({\n      isValidating: true,\n    });\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state) ||\n        readFormStateRef.current.isValidating\n      ) {\n        updateFormState({\n          ...state,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n          isValidating: false,\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (name: FieldName<TFieldValues>, rawValue: SetFieldValue<TFieldValues>) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref)) {\n        (options || []).forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = React.useCallback(\n    (name?: string, data?: unknown[]): boolean => {\n      if (readFormStateRef.current.isDirty) {\n        const formValues = getValues();\n\n        name && data && set(formValues, name, data);\n\n        return !deepEqual(formValues, defaultValuesRef.current);\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touched'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && updateFormState(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!fieldsRef.current[name]) {\n          console.warn('📋 Field is missing with `name` attribute: ', name);\n          return false;\n        }\n      }\n\n      const error = (\n        await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          shallowFieldsStateRef,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          isValidating: false,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      updateIsValidating();\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        !name && (formStateRef.current.errors = {});\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState({\n          isValidating: false,\n        });\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      config: SetValueConfig,\n    ) => {\n      !shouldUnregister &&\n        !isPrimitive(value) &&\n        set(shallowFieldsStateRef.current, name, { ...value });\n\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n        config.shouldValidate && trigger(name as any);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          const parentName = getNodeParentName(name) || name;\n          set(fieldArrayDefaultValuesRef.current, name, value);\n\n          resetFieldArrayFunctionRef.current[parentName]({\n            [parentName]: get(fieldArrayDefaultValuesRef.current, parentName),\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = <T extends FieldName<TFieldValues>>(name: T) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = <T extends FieldName<FieldValues>>(\n    name: T,\n  ): boolean => {\n    let found = true;\n\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getNodeParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue(\n    name: FieldName<TFieldValues>,\n    value: SetFieldValue<TFieldValues>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value, config || {});\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        let name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender =\n            !isEmptyObject(state) ||\n            (!isBlurEvent && isFieldWatched(name as FieldName<TFieldValues>));\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (!shouldUnregister && isCheckBoxInput(target as Ref)) {\n            set(\n              shallowFieldsStateRef.current,\n              name,\n              getFieldValue(fieldsRef, name),\n            );\n          }\n\n          if (shouldSkipValidation) {\n            !isBlurEvent && renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          updateIsValidating();\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n            error = get(errors, name);\n\n            if (\n              isCheckBoxInput(target as Ref) &&\n              !error &&\n              resolverRef.current\n            ) {\n              const parentNodeName = getNodeParentName(name);\n              const currentError = get(errors, parentNodeName, {});\n              currentError.type &&\n                currentError.message &&\n                (error = currentError);\n\n              if (\n                parentNodeName &&\n                (currentError ||\n                  get(formStateRef.current.errors, parentNodeName))\n              ) {\n                name = parentNodeName;\n              }\n            }\n\n            isValid = isEmptyObject(errors);\n\n            previousFormIsValid !== isValid && (shouldRender = true);\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          !isBlurEvent && renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n      ),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const newDefaultValues = isEmptyObject(fieldsRef.current)\n        ? defaultValuesRef.current\n        : {};\n\n      const { errors } =\n        (await resolverRef.current!(\n          {\n            ...newDefaultValues,\n            ...getValues(),\n            ...values,\n          },\n          contextRef.current,\n          isValidateAllFieldCriteria,\n        )) || {};\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) => {\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      );\n\n      if (shouldUnregister) {\n        unset(validFieldsRef.current, field.ref.name);\n        unset(fieldsWithValidationRef.current, field.ref.name);\n      }\n    },\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = React.useCallback((name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field?: Field, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            isDirty: isFormDirty(),\n          });\n\n          readFormStateRef.current.isValid &&\n            resolverRef.current &&\n            validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName] && isKey(inputName)\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption) {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    <T>(fieldNames?: string | string[], defaultValue?: T, watchId?: string) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      let fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        const parentNodeName = getNodeParentName(fieldNames) || fieldNames;\n\n        if (fieldArrayNamesRef.current.has(parentNodeName)) {\n          fieldValues = {\n            ...fieldArrayValuesRef.current,\n            ...fieldValues,\n          };\n        }\n\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(get(defaultValuesRef.current, fieldNames))\n            ? defaultValue\n            : get(defaultValuesRef.current, fieldNames),\n          true,\n        );\n      }\n\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name?: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[] | undefined,\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    options: RegisterOptions | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...options,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...options,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...options,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name as FieldName<TFieldValues>, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(options)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          previousFormIsValid !== isEmptyObject(error) && updateFormState();\n        });\n      }\n    }\n\n    if (shouldUnregister && !(isFieldArray && isEmptyDefaultValue)) {\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    options?: RegisterOptions,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrRegisterOptions?:\n      | FieldName<TFieldValues>\n      | RegisterOptions\n      | (TFieldElement & Ref)\n      | null,\n    options?: RegisterOptions,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrRegisterOptions)) {\n        registerFieldRef({ name: refOrRegisterOptions }, options);\n      } else if (\n        isObject(refOrRegisterOptions) &&\n        'name' in refOrRegisterOptions\n      ) {\n        registerFieldRef(refOrRegisterOptions, options);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrRegisterOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(\n          fieldsRef,\n          cloneObject(shallowFieldsStateRef.current),\n          shouldUnregister,\n          true,\n        ),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const { name } = field.ref;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n        }\n      } finally {\n        formStateRef.current.isSubmitting = false;\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: DefaultValues<TFieldValues>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = { ...(values || defaultValuesRef.current) };\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values || defaultValuesRef.current);\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    resolver && readFormStateRef.current.isValid && validateResolver();\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n  }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\n\n  React.useEffect(\n    () => () => {\n      observerRef.current && observerRef.current.disconnect();\n      isUnMount.current = true;\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    },\n    [],\n  );\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = React.useMemo(\n    () => ({\n      isFormDirty,\n      updateWatchedValue,\n      shouldUnregister,\n      updateFormState,\n      removeFieldEventListener,\n      watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur,\n        isReValidateOnChange,\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef,\n      resetFieldArrayFunctionRef,\n      useWatchFieldsRef,\n      useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      shallowFieldsStateRef,\n      fieldArrayValuesRef,\n      ...commonProps,\n    }),\n    [\n      defaultValuesRef.current,\n      updateWatchedValue,\n      shouldUnregister,\n      removeFieldEventListener,\n      watchInternal,\n    ],\n  );\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n"],"sourceRoot":""}